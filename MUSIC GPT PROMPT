-- The previous lines are given data describing a video made up of multiple scenes. The scene data consist of all scenes each includes a motion intensity score, keyframes, 
detected objects and text, spoken dialogue, and a dynamic rating (indicating how intense or calm the music should feel). 
You are also given a list called scene_durations that specifies the exact duration (in seconds) of each scene calculated from the frontend

🔹 Part 1: Video Type, Theme, and Score Strategy
Infer the video type (e.g., short film, trailer, vlog, ad, PSA) based on pacing, content, and structure.

Summarize the video’s overall tone, emotional arc, and message.

Design a musical theme that fits the tone and arc.

Explain your scoring strategy in detail:

How you match music intensity to scene dynamics

How motion class (low, medium, high) influences tempo and rhythm

How visual tone, text, or object detection impacts instrumentation, genre, or harmony

How dialogue affects musical silence or cue timing

Where and how you transition between musical phrases

How your strategy adapts to the inferred video type

Next:

Describe each scene (Scene 1, Scene 2, etc.) in detail based on data provided.

Then group scenes into musical sequences using the following rules:

Grouping Rules:
Every scene (except Scene 0) must be included in some group.

If a scene is shorter than 3 seconds, group it with one or more neighboring scenes. this is my frontend function that does the same, which was used to calculate the scene durations passed to this prompt.           const collapseSceneChanges = (changes, threshold) => {
           
if (!changes.length) return [];
            const out = [];
            let start = changes[0], end = start;
            for (let i = 1; i < changes.length; i++) {
              const t = changes[i];
              if (t - end < threshold) {
                end = t;
              } else {
                out.push(start);
                if (end !== start) out.push(end);
                start = end = t;
              }
            }
            if (start === end) out.push(start);
            else { out.push(start); out.push(end); }
            return out;
          };

          const collapsed = collapseSceneChanges(sceneChanges, 3);

apply the same logic when grouping scenes to be consistent

Do not skip short scenes, add them to prev scene like the function — they count toward group duration.

Groups must have a minimum total duration of 10 seconds.

Must keep group durations atleast 10s, try not to go beyond 30 seconds in one group.
If the total duration of the video is 15 seconds for example, only return one scene group.
for a 30s video, you could do 3 scene groups or just 2, depending what the video calls for.
If video is ~30 seconds and scenes are consistent, not many changes, and seems it calls for 1 track the whole time,
then you may return only 1 scene group.

Group based on shared:

mood

pacing

motion class

dialogue tone

detected objects or text

visual/narrative function

After grouping:

Recap which scenes you placed in each group.

Scene numbers start at 1 (skip scene 0).

🔹 Part 2: Musical Descriptions for Each Group
Write one short music description per group using your inferred strategy.

Rules:

Match group dynamic and motion class

If dynamics are equal, vary tone or texture

Use motion intensity to shape rhythm/tempo

Do not use punctuation inside descriptions

Return a single comma-separated string

Do not use newlines, numbers, or scene labels

✅ Example:
If groups are [[1, 2], [3, 4], [5]], return:

soft ambient texture, light pulsing synth, mellow string drone

🔹 Part 3: Scene Grouping
Return only the raw grouping of scenes as a list of lists, using 1-based indexing (skip Scene 0).

Rules:

Include every scene ≥ Scene 1

Group short scenes with neighbors (do not skip them)

Must keep group durations atleast 10s, try not to go beyond 30 seconds in one group.
If the total duration of the video is 15 seconds for example, only return one scene group.
for a 30s video, you could do 3 scene groups or just 2, depending what the video calls for.
If video is ~30 seconds and scenes are consistent, not many changes, and seems it calls for 1 track the whole time,
then you may return only 1 scene group.

📌 Format (no explanation, just the list):


[[1, 2], [3, 4, 5], [6]]
✂️ Delimiter Between Sections
Separate Part 1, Part 2, and Part 3 using this exact line:


////
